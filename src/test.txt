class Supertype {
    Object foo() 
    /*@ requires:  
        ensures: @*/
    {
      Object o ;
	    o = new Object(); 
      return o;
    }

    Object bar() 
    /*@ requires:  
        ensures: @*/
    {
      return null;
    }
  }

class Subtype extends Supertype {
    @Override
    Object foo() 
    /*@ requires:  
        ensures: @*/
    {
      return null;
    }

    @Override
    Object bar() 
    /*@ requires:  
        ensures: @*/
    {
	  Object o ;
	  o = new Object();
      return o;
    
  }
	@Virtual
	void test4b(Supertype o) 
    /*@ requires:  
        ensures: @*/
  {
    m = o.foo();
	m.toString();
	
  }
	@Virtual
	void dynamicDispatchShouldReportWhenCalledWithSubtypeParameterBad_FN(Subtype o) 
    /*@ requires:  
        ensures: @*/
  {
    test4b(o);
  }
}

class Interface {
    Object foo() 
    /*@ requires:  
        ensures: @*/
    {
		return null;
	}
  }

class Impl extends Interface {
    @Inherit
	Object foo() 
      /*@ requires:  
        ensures: @*/
  {
      return null;
    }
	
	@Virtual
	void test1() 
      /*@ requires:  
        ensures: @*/
  {
    Interface i; 
	  i = new Impl();
    a = i.foo(); 
    a.toString();  
  }
	@Virtual
    void test2(Interface i) 
        /*@ requires:  
        ensures: @*/
    {
    a = i.foo();
    a.toString();
  }
}

class WithField {

    Supertype mField;
	@Virtual
    WithField(Supertype t) 
        /*@ requires:  
        ensures: @*/
    {
      mField = t;
    }
    @Virtual
    void test7b() 
        /*@ requires:  
        ensures: @*/
    {
      Supertype subtype;
	  subtype= new Subtype();
      WithField object;
	  object = new WithField(subtype);
      int x; 
      x = object.mField.bar();
      x.toString();
    }
    
    @Virtual
    void test7a() 
        /*@ requires:  
        ensures: @*/
    {
      Supertype subtype;
	  subtype = new Subtype();
      WithField object;
	  object = new WithField(subtype);
          int x; 
      x = object.mField.bar();
      x.toString();
    }
  }